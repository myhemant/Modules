<?php

function field_group_nextpre_field_group_formatter_info() {
  return array(
	'form' => array(
		'htabsnp' => array(
			'label' => t('Horizontal tabs group with next pre'),
			'description' => t('This fieldgroup renders the inner content in a HTML element with classes and attributes.'),
			'instance_settings' => array('element' => 'div', 'show_label' => 0, 'label_element' => 'div', 'classes' => '', 'attributes' => '', 'required_fields' => 1),
      ),
		'htabnp' => array(
			'label' => t('Horizontal tabs with next pre'),
			'description' => t('This fieldgroup renders the inner content in a HTML element with classes and attributes.'),
			'instance_settings' => array('element' => 'div', 'show_label' => 0, 'label_element' => 'div', 'classes' => '', 'attributes' => '', 'required_fields' => 1),
      ),
	 'tabsnp' => array(
        'label' => t('Vertical tabs group with next pre'),
        'description' => t('This fieldgroup renders child groups in its own horizontal tabs wrapper.'),
        'instance_settings' => array('classes' => ''),
      ),
      'tabnp' => array(
        'label' => t('Vertical tab with next pre'),
        'format_types' => array('open', 'closed'),
        'description' => t('This fieldgroup renders the content in a fieldset, part of horizontal tabs group.'),
        'default_formatter' => 'closed',
        'instance_settings' => array('description' => '', 'classes' => '', 'required_fields' => 1, 'id' => ''),
      )
	)
  );
}

/**
 * Helper function to prepare basic variables needed for most formatters.
 *
 * Called in field_group_field_group_pre_render(), but can also be called in
 * other implementations of hook_field_group_pre_render().
 */
function field_group_nextpre_pre_render_prepare(&$group) {

  $classes = _field_group_nextpre_get_html_classes($group);

  $group->classes = implode(' ', $classes->required);
  $group->description = !empty($group->format_settings['instance_settings']['description']) ? filter_xss_admin(t($group->format_settings['instance_settings']['description'])) : '';

}

/**
 * Implements hook_field_group_pre_render().
 *
 * @param Array $elements by address.
 * @param Object $group The Field group info.
 */	
function field_group_nextpre_field_group_pre_render(&$element, &$group, & $form) {

  field_group_nextpre_pre_render_prepare($group);

  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';

  // Add all field_group format types to the js settings.
  $form['#attached']['js'][] = array(
    'data' => array('field_group_nextpre' => array($group->format_type => $view_mode)),
    'type' => 'setting',
  );

  if (isset($group->format_settings['instance_settings']['id']) && !empty($group->format_settings['instance_settings']['id'])) {
    $element['#id'] = drupal_html_id($group->format_settings['instance_settings']['id']);
  }

  $element['#weight'] = $group->weight;

  // Call the pre render function for the format type.
  $function = "field_group_nextpre_pre_render_" . str_replace("-", "_", $group->format_type);
  if (function_exists($function)) {
    $function($element, $group, $form);
  }

}

/**
 * Implements field_group_pre_render_<format-type>.
 * Format type: Horizontal tabs group.
 *
 * @param $element The field group form element.
 * @param $group The Field group object prepared for pre_render.
 * @param $form The root element or form.
 */
function field_group_nextpre_pre_render_htabsnp(&$element, $group, &$form) {

  $element += array(
    '#type' => 'horizontal_tabs',
    '#title' => check_plain(t($group->label)),
    '#theme_wrappers' => array('horizontal_tabs'),
    '#prefix' => '<div class="field-group-nextpre ' . $group->format_type . '-wrapper ' . $group->classes . '">',
    '#suffix' => '</div>',
  );

  // By default vertical_tabs don't have titles but you can override it in the theme.
  if (!empty($group->label)) {
    $element['#title'] = check_plain($group->label);
  }

  // Only add form.js on forms.
  if (!empty($form['#type']) && $form['#type'] == 'form') {
    $element['#attached']['js'][] = 'misc/form.js';
  }

  $element['#attached']['library'][] = array('field_group_nextpre', 'horizontal-tabs-nextpre');
}

/**
 * Implements hook_library().
 */
function field_group_nextpre_library() { 
	$buttons_pre = '<input type="submit" id="edit-prev" name="op" value="Prev" class="form-submit pre"/>';
	$buttons_next = '<input type="submit" id="edit-next" name="op" value="Next" class="form-submit next"/>';
	
	$settings_name_nextpre = array (
        'pre_button'  => $buttons_pre,
		'next_button' => $buttons_next,
    );
	
// Call to drupal_add_js and the parameters are our custom settings as array, and second is 'settings' itself.
drupal_add_js(array('nextpre_settings' => $settings_name_nextpre), 'setting');

  $module_Path = drupal_get_path('module', 'field_group');
  $path = drupal_get_path('module', 'field_group_nextpre');

  // Horizontal Tabs with Next/Pre.
  $libraries['horizontal-tabs-nextpre'] = array(	
    'title' => 'Horizontal Tabs Next/Pre',
    //'website' => 'http://drupal.org/node/323112',
    'version' => '1.0',
    'js' => array(
           $module_Path . '/horizontal-tabs/horizontal-tabs.js' => array(),
		   $path . '/js/field_group_nextpre.js' => array(),
    ),
    'css' => array(
      $path . '/css/horizontal-nextpre-tabs.css' => array(),
    ),
  );
  // Vertical Tabs with Next/Pre.
  $libraries['vertical-tabs-nextpre'] = array(	
    'title' => 'Vertical Tabs Next/Pre',
    //'website' => 'http://drupal.org/node/323112',
    'version' => '1.0',
    'js' => array(
          $path . '/js/fieldgroup_nextpre_vertical.js' => array(),
    ),
    'css' => array(
      $path . '/css/horizontal-nextpre-tabs.css' => array(),
    ),
  );
  
  return $libraries;
}

/**
 * Returns HTML for an element's children fieldsets as horizontal tabs.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties and children of the
 *     fieldset. Properties used: #children.
 *
 * @ingroup themeable
 */
function theme_horizontal_tabs_nextpre($variables) {
  $element = $variables['element'];
  // Add required JavaScript and Stylesheet.
  $element['#attached']['library'][] = array('field_group_nextpre', 'horizontal-tabs-nextpre');
  $output = '<h2 class="element-invisible">' . (!empty($element['#title']) ? $element['#title'] : t('Horizontal Tabs Next/Pre')) . '</h2>';
  $output .= '<div class="horizontal-tabs-panes">' . $element['#children'] . '</div>';

  return $output;
}
/**
 * Implements field_group_pre_render_<format-type>.
 * Format type: Horizontal tab.
 *
 * @param $element The field group form element.
 * @param $group The Field group object prepared for pre_render.
 * @param $form The root element or form.
 */
function field_group_nextpre_pre_render_htabnp(&$element, $group, &$form) {  
		 return field_group_pre_render_htab($element, $group, $form);
 }


/**
 * Implements field_group_pre_render_<format-type>.
 * Format type: Vertical tabs wrapper.
 *
 * @param $element The field group form element.
 * @param $group The Field group object prepared for pre_render.
 * @param $form The root element or form.
 */
function field_group_nextpre_pre_render_tabsnp(&$element, $group, &$form) {
  $element += array(
    '#type' => 'vertical_tabs',
    '#theme_wrappers' => array('vertical_tabs'),
    '#prefix' => '<div class="field-group-' . $group->format_type . '-wrapper ' . $group->classes . '">',
    '#suffix' => '</div>',
  );

  // By default vertical_tabs don't have titles but you can override it in the theme.
  if (!empty($group->label)) {
    $element['#title'] = check_plain($group->label);
  }

  $element[$group->group_name . '__active_tab'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array('class' => array('vertical-tabs-active-tab')),
  );

  $element['#attached']['library'][] = array('system', 'drupal.collapse');
  $element['#attached']['library'][] = array('field_group_nextpre', 'vertical-tabs-nextpre');
}

/**
 * Implements field_group_pre_render_<format-type>.
 * Format type: Vertical tab.
 *
 * @param $element The field group form element.
 * @param $group The Field group object prepared for pre_render.
 * @param $form The root element or form.
 */
function field_group_nextpre_pre_render_tabnp(&$element, $group, &$form) {
		return	field_group_pre_render_tab($element, $group, $form) ;
  }
/**
 * Implementation of hook_form_alter(). 
 */

/**
 * Function to pre render the field group element.
 *
 * @see field_group_fields_nest()
 *
 * @param $element Array of group element that needs to be created!
 * @param $group Object with the group information.
 * @param $form The form object itself.
 */
function field_group_nextpre_pre_render(& $element, $group, & $form) {

  // Only run the pre_render function if the group has elements.
  // $group->group_name
  if ($element == array()) {
    return;
  }

  // Let modules define their wrapping element.
  // Note that the group element has no properties, only elements.
  foreach (module_implements('field_group_nextpre_pre_render') as $module) {
    $function = $module . '_field_group_nextpre_pre_render';
    if (function_exists($function)) {
      // The intention here is to have the opportunity to alter the
      // elements, as defined in hook_field_group_formatter_info.
      // Note, implement $element by reference!
      $function($element, $group, $form);
    }
  }

  // Allow others to alter the pre_render.
  drupal_alter('field_group_nextpre_pre_render', $element, $group, $form);

}

/**
 * Calculates html classes for a group.
 */
function _field_group_nextpre_get_html_classes(&$group) {
  
  if (isset($group->format_settings['formatter'])) {
    $group->collapsible = in_array($group->format_settings['formatter'], array('collapsible', 'collapsed'));
    // Open or closed horizontal or vertical tabs will be collapsible by default.
    if ($group->format_type == 'tabnp' || $group->format_type == 'htabnp') {
      $group->collapsible = TRUE;
    }
    $group->collapsed = in_array($group->format_settings['formatter'], array('collapsed', 'closed'));
  }

  $classes = new stdClass();

  // Prepare extra classes, required and optional ones.
  $optional = array(str_replace('_', '-', $group->group_name));
  $required = array();
  

  if (isset($group->format_settings['formatter']) && $group->collapsible) {
    $required[] = 'collapsible';
    if ($group->collapsed) {
      $required[] = 'collapsed';
    }
  }

  if (isset($group->format_settings['instance_settings'])) {

    // Add a required-fields class to trigger the js.
    if (!empty($group->format_settings['instance_settings']['required_fields'])) {
      $required[] = 'required-fields';
    }

    // Add user selected classes.
    if (!empty($group->format_settings['instance_settings']['classes'])) {
      $required[] = check_plain($group->format_settings['instance_settings']['classes']);
    }

  }
  $classes->required = $required;
  $classes->optional = $optional;
	
   return $classes;
}